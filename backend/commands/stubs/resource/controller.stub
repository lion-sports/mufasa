{{#var entity = generators.createEntity(name)}}
{{#var modelName = generators.modelName(entity.name)}}
{{#var modelReference = string.camelCase(modelName)}}
{{#var pluralReference = string(string.pluralize(name)).camelCase().toString()}}
{{#var controllerFileName = string(pluralReference).suffix('Controller').pascalCase().ext('.ts').toString()}}
{{#var managerReference = string(pluralReference).suffix('Manager').pascalCase().toString()}}
{{#var managerFilename = string(pluralReference).camelCase().suffix('.manager').toString()}}
{{#var controllerReference = string(pluralReference).suffix('Controller').pascalCase().toString()}}
{{{
  exports({
    to: app.makePath('app/Controllers/Http', controllerFileName)
  })
}}}
import type { HttpContext } from '@adonisjs/core/http'
import {{{managerReference}}} from '#app/managers/{{{managerFilename}}}'

export default class {{{controllerReference}}} {
  public async index({ request }: HttpContext) {
    const manager = new {{{managerReference}}}()

    return await manager.list({
      data: {
        page: request.input('page'),
        perPage: request.input('perPage'),
        filtersBuilder: request.input('filtersBuilder'),
      },
    })
  }

  public async store({ request }: HttpContext) {
    const manager = new {{{managerReference}}}()

    return await manager.create({
      data: {
        name: request.input('name'),
      },
    })
  }

  public async show({ params }: HttpContext) {
    const manager = new {{{managerReference}}}()

    return await manager.get({
      data: {
        id: params.id,
      },
    })
  }

  public async update({ request, params }: HttpContext) {
    const manager = new {{{managerReference}}}()

    return await manager.update({
      data: {
        id: params.id,
        name: request.input('name'),
      },
    })
  }

  public async destroy({ params }: HttpContext) {
    const manager = new {{{managerReference}}}()

    return await manager.destroy({
      data: {
        id: params.id,
      },
    })
  }
}
