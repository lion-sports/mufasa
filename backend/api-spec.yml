openapi: 3.0.0
info:
  title: Lionsport API
  description: Description of lionsport API
  version: 1.0.0
# servers:
#   - url: http://api.example.com/v1
#     description: Optional server description, e.g. Main (production) server
#   - url: http://staging-api.example.com
#     description: Optional server description, e.g. Internal staging server for test
components:
  schemas:
    PaginationMeta:
      type: object
      properties:
        total: 
          type: integer
        perPage:
          type: number
        currentPage:
          type: number
    User:
      type: object
      properties:
        id: 
          type: integer
        email:
          type: string
        name:
          type: string
        color:
          type: string
          nullable: true
        textColor:
          type: string
          nullable: true
        rememberMeToken:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Team:
      type: object
      properties:
        id: 
          type: integer
        uid:
          type: string
          nullable: true
        name:
          type: string
        ownerId:
          type: integer
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Invitation:
      type: object
      properties:
        id: 
          type: integer
        invitedByUserId:
          type: integer
        invitedUserId:
          type: integer
          nullable: true
        invitedBy:
          nullable: true
          $ref: "#/components/schemas/User"
        invitedEmail:
          type: string
        teamId:
          type: integer
        team:
          nullable: true
          $ref: "#/components/schemas/Team"
        groupId:
          type: integer
          nullable: true
        status:
          type: string
          enum:
            - pending 
            - rejected
            - accepted
            - discarded
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Event:
      type: object
      properties:
        id:
          type: integer
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
          nullable: true
        teamId:
          type: integer
          nullable: true
        team:
          nullable: true
          $ref: "#/components/schemas/Team"
        frequencyId:
          type: integer
          nullable: true
        status:
          type: string
          enum:
            - confirmed
            - notConfirmed
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    EventSession:
      type: object
      properties:
        id:
          type: integer
        uid:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Group:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        convocable:
          type: boolean
        cans:
          nullable: true
          type: object
        team:
          nullable: true
          $ref: "#/components/schemas/Team"
        teamId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Convocation:
      type: object
      properties:
        id:
          type: integer
        notes:
          type: string
          nullable: true
        eventId:
          type: integer
        teammateId:
          type: integer
        confirmationStatus:
          type: string
        teamId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Teammate:
      type: object
      properties:
        id:
          type: integer
        groupId:
          type: integer
        teamId:
          type: integer
        uid:
          type: string
          nullable: true
        userId: 
          type: integer
        alias:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Shirt:
      type: object
      properties:
        id:
          type: integer
        teammateId:
          type: integer
        number:
          type: integer
        name:
          type: string
          nullable: true
        primaryColor:
          type: string
          nullable: true
        secondaryColor:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Scout:
      type: object
      properties:
        id:
          type: integer
        sport:
          type: string
          enum:
            - volleyball
            - basketball
        name:
          type: string
        startedAt:
          type: string
          format: date-time
        eventId:
          type: integer
        scoutInfo:
          nullable: true
          type: object
          properties:
            general:
              type: object
              properties:
                opponent: 
                  type: object
                  nullable: true
                  properties:
                    name: 
                      type: string
                      nullable: true
                friendsFieldSide:
                  type: string
                  nullable: true
                  enum:
                    - right
                    - left
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    ScoringSystem:
      type: object
      properties:
        id:
          type: integer
        sport:
          type: string
          enum:
            - volleyball
            - basketball
        name:
          type: string
        public:
          type: boolean
        createdByUserId:
          type: number
        createdForTeamId:
          type: integer
          nullable: true
        config:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Player:
      type: object
      properties:
        id:
          type: integer
        convocationId:
          type: number
          nullable: true
        scoutId:
          type: number
          nullable: false
        teammateId:
          type: number
          nullable: true
        aliases:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        shirtId:
          type: number
          nullable: true
        shirtNumber:
          type: number
          nullable: true
        shirtPrimaryColor:
          type: string
          nullable: true
        shirtSecondaryColor:
          type: string
          nullable: true
        startedAt:
          type: string
          format: date-time
        eventId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time

paths:
  /auth/login:
    post:
      summary: Return a token to put in the authorization header.
      responses:
        '200':
          description: Auth token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  token:
                    type: string
                  expires_at:
                    type: string
                    format: date-time
                  expires_in:
                    type: number
                  userId:
                    type: number
                    nullable: true
                  refreshToken:
                    type: string
                    nullable: true
                  refreshTokenExpiration:
                    type: string
                    format: date-time
    parameters:
      - name: email
        in: query
        description: The email of the user
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password of the user
        required: true
        schema:
          type: string
  /auth/refreshToken:
    post:
      summary: Return a brand new token to put in the authorization header with the refresh token as a parameter.
      responses:
        '200':
          description: Auth token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  token:
                    type: string
                  expires_at:
                    type: string
                    format: date-time
                  expires_in:
                    type: number
  /auth/signup:
    post:
      summary: Signup and create a new user.
      responses:
        '200':
          description: New User.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
    parameters:
      - name: email
        in: query
        description: The email of the new user
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password of the new user
        required: true
        schema:
          type: string
      - name: name
        in: query
        description: The name of the new user
        required: true
        schema:
          type: string
  /auth/logout:
    post:
      summary: Revoke a token for a user.
      responses:
        '200':
          description: Status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  revoked:
                    type: boolean
  /users:
    get:
      summary: Returns a list of users.
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
    post:
      summary: Create a user.
      responses:
        '200':
          description: The new user.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
  /users/{userId}:
    get:
      summary: Returns a certain user.
      responses:
        '200':
          description: The user got.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
    put:
      summary: Update a certain user.
      responses:
        '200':
          description: The user got.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
  /teams:
    post:
      summary: Create a new team.
      responses:
        '200':
          description: The new team.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    get:
      summary: Returns a list of teams associated to the current user.
      responses:
        '200':
          description: The teams associated to my user.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
  /teams/{teamId}:
    get:
      summary: Returns a certain team.
      responses:
        '200':
          description: The team.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    put:
      summary: Update a certain team.
      responses:
        '200':
          description: The team updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Team"
  /teams/{teamId}/removeUser:
    post:
      summary: Remove the logged in user from a team.
      responses:
        '200':
          description: No response.
  /teams/{teamId}/exit:
    post:
      summary: Remove a user from a team.
      responses:
        '200':
          description: No response.
  /teams/{teamId}/updatePreference:
    post:
      summary: Update a preference for a team.
      responses:
        '200':
          description: The team updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Team"
  /teams/absencesInLatestEvents:
    get:
      summary: Returns a the absences for the latest events in all participating teams.
      responses:
        '200':
          description: The teams associated to my user.
          content:
            application/json:
              schema: 
                type: object
                additionalProperties: 
                  type: object
                  properties:
                    team:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                    absences:
                      type: object
                      properties:
                        eventId:
                          type: number
                        absencesNumber:
                          type: number
                        
  /teammates/{teammateId}:
    put:
      summary: Update a certain teammate.
      responses:
        '200':
          description: The teammate updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Teammate"
  /invitations/inviteUser:
    post:
      summary: Invite a user to a team.
      responses:
        '200':
          description: The invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: user
        in: query
        description: The user to invite
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
      - name: team
        in: query
        description: The team where the user has been invited
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
      - name: group
        in: query
        description: The group the user would be
        required: false
        schema:
          type: object
          properties:
            id:
              type: integer
  /invitations/list:
    get:
      summary: Get my invitations
      responses:
        '200':
          description: The invitation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
  /invitations/accept:
    post:
      summary: Accept an invitation
      responses:
        '200':
          description: The accepted invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: invitation
        in: query
        description: The invitation to accept
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
  /invitations/reject:
    post:
      summary: Reject an invitation
      responses:
        '200':
          description: The rejected invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: invitation
        in: query
        description: The invitation to reject
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
  /invitations/discard:
    post:
      summary: Discard an invitation
      responses:
        '200':
          description: The discarded invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: invitation
        in: query
        description: The invitation to discard
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
  /events:
    post:
      summary: Create a new event.
      responses:
        '200':
          description: The new event.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
      parameters:
        - name: event
          in: query
          description: The event to create
          required: true
          schema:
            $ref: "#/components/schemas/Event"
    get:
      summary: Get a list of events.
      responses:
        '200':
          description: The events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
      parameters:
        - name: filters
          in: query
          description: The event to create
          required: true
          schema:
            type: object
            properties:
              from: 
                type: string
                format: date-time
              to: 
                type: string
                format: date-time
              team:
                type: object
                properties:
                  id: 
                    type: integer
  /events/{eventId}:
    get:
      summary: Get an event.
      responses:
        '200':
          description: The event.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
      parameters:
        - name: eventId
          in: path
          description: The id of the event to get
          required: true
          schema:
            type: integer
    put:
      summary: Update an event.
      responses:
        '200':
          description: The updated event.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
      parameters:
        - name: eventId
          in: path
          description: The id of the event to update
          required: true
          schema:
            type: integer
        - name: data
          in: query
          description: The data used to update the event
          required: true
          schema:
            $ref: "#/components/schemas/Event"
    delete:
      summary: Destroy a new event.
      responses:
        '200':
          description: No response.
      parameters:
        - name: eventId
          in: path
          description: The id of the event to update
          required: true
          schema:
            type: integer
  /events/{eventId}/convocate:
    post:
      summary: Convocate a teammate in an event.
      responses:
        '200':
          description: The created convocations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Convocation"
      parameters:
        - name: eventId
          in: path
          description: The event to convocate to
          required: true
          schema:
            type: integer
        - name: teammates
          in: query
          description: The teammates to convocate
          required: true
          schema:
            type: array
            items:
              type: object
              properties:
                id: 
                  type: integer
  /events/{eventId}/unConvocate:
    post:
      summary: Delete convocation of a teammate in an event.
      responses:
        '200':
          description: The created convocations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Convocation"
      parameters:
        - name: eventId
          in: path
          description: The event to un convocate from.
          required: true
          schema:
            type: integer
        - name: teammates
          in: query
          description: The teammates to convocate.
          required: true
          schema:
            type: array
            items:
              type: object
              properties:
                id: 
                  type: integer
  /events/createWithFrequency:
    post:
      summary: Create a new event repeating over time.
      responses:
        '200':
          description: The new events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    parameters:
      - name: event
        in: query
        description: The event to create
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - confirmed
                - notConfirmed
            team:
              type: object
              properties:
                id:
                  type: integer
      - name: rule
        in: query
        description: The rule to create the event
        required: true
        schema:
          type: object
          properties:
            frequency:
              type: string
              enum:
                - week
                - month
            from:
              type: string
              format: date-time
            to:
              type: string
              format: date-time
            daysOfWeek:
              type: array
              items:
                type: number
            daysOfMonth:
              type: array
              items:
                type: number
  /events/copyWeek:
    post:
      summary: Copy the events of a week to another.
      responses:
        '200':
          description: The new events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    parameters:
      - name: fromWeekNumber
        in: query
        description: The week number to create from
        required: true
        schema:
          type: integer
      - name: fromWeekYear
        in: query
        description: The week year to create from
        required: true
        schema:
          type: integer
      - name: toWeekNumber
        in: query
        description: The week number to create to
        required: true
        schema:
          type: integer
      - name: toWeekYear
        in: query
        description: The week year to create to
        required: true
        schema:
          type: integer
      - name: team
        in: query
        description: The team to take the event from
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
  /eventSessions:
    post:
      summary: Create a new event session.
      responses:
        '200':
          description: The new event session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSession"
    get:
      summary: Returns a list of event sessions associated to the current user.
      responses:
        '200':
          description: The event sessions associated to my user.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EventSession"
  /eventSessions/{eventSessionId}:
    get:
      summary: Returns a certain event session.
      responses:
        '200':
          description: The event session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSession"
    put:
      summary: Update an event session.
      responses:
        '200':
          description: The team updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Team"
    delete:
      summary: delete a event session.
      responses:
        '200':
          description: No response.
  /shirts:
    post:
      summary: Create a new shirt.
      responses:
        '200':
          description: The new shirt.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shirt"
    get:
      summary: Returns a list of shirts associated to the teammates that the user can view.
      responses:
        '200':
          description: The shirts visible to my user.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Shirt"
  /shirts/{shirtId}:
    get:
      summary: Returns a certain shirt.
      responses:
        '200':
          description: The shirt.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shirt"
    put:
      summary: Update a shirt.
      responses:
        '200':
          description: The shirt updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Shirt"
    delete:
      summary: delete a shirt.
      responses:
        '200':
          description: No response.
  /players:
    post:
      summary: Create a new player.
      responses:
        '200':
          description: The new player.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
    get:
      summary: Returns a list of players associated to the scouts that the user can view.
      responses:
        '200':
          description: The players visible to my user.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Player"
  /players/{playerId}:
    get:
      summary: Returns a certain player.
      responses:
        '200':
          description: The player.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
    put:
      summary: Update a player.
      responses:
        '200':
          description: The player updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Player"
    delete:
      summary: delete a player.
      responses:
        '200':
          description: No response.
  /scouts:
    post:
      summary: Create a new scout.
      responses:
        '200':
          description: The new scout.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scout"
    get:
      summary: Returns a list of scouts associated to the events that the user can view.
      responses:
        '200':
          description: The scouts visible to my user.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Scout"
  /scouts/{scoutId}:
    get:
      summary: Returns a certain scout.
      responses:
        '200':
          description: The scout.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scout"
    put:
      summary: Update a scout.
      responses:
        '200':
          description: The scout updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Scout"
    delete:
      summary: delete a scout.
      responses:
        '200':
          description: No response.
  /scouts/{scoutId}/importTeammates:
    post:
      summary: Import teammates from event convocations into scout players.
      responses:
        '200':
          description: The scout.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /scoringSystems:
    post:
      summary: Create a new scoring system.
      responses:
        '200':
          description: The new scoring system.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoringSystem"
    get:
      summary: Returns a list of scoring systems that the user can view.
      responses:
        '200':
          description: The scoring systems visible to my user.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ScoringSystem"
  /scoringSystems/{scoringSystemId}:
    get:
      summary: Returns a certain scoring system.
      responses:
        '200':
          description: The scoring system.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoringSystem"
    put:
      summary: Update a scoring system.
      responses:
        '200':
          description: The scoring system updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ScoringSystem"
    delete:
      summary: delete a scoring system.
      responses:
        '200':
          description: No response.
  /groups:
    post:
      summary: Create a new group.
      responses:
        '200':
          description: The new group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /teams/{teamId}/groups:
    get:
      summary: Returns a list of groups associated to the team.
      responses:
        '200':
          description: The groups associated to the teams.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
  /groups/{teamId}:
    get:
      summary: Returns a certain group.
      responses:
        '200':
          description: The group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      summary: Update a certain group.
      responses:
        '200':
          description: The updated group.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Group"
  /convocations/{convocationId}/confirm:
    post:
      summary: Confirm a convocation.
      responses:
        '200':
          description: The new convocation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Convocation"
  /convocations/{convocationId}/deny:
    post:
      summary: Deny a convocation.
      responses:
        '200':
          description: The new convocation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Convocation"